<?xml version="1.0"?>
<workflow-definition xmlns="urn:liferay.com:liferay-workflow_6.2.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="urn:liferay.com:liferay-workflow_6.2.0 http://www.liferay.com/dtd/liferay-workflow-definition_6_2_0.xsd">
	<name>Idea workflow</name>
	<description>Workflow for idea</description>
	<version>1</version>
	<state>
		<name>created</name>
		<initial>true</initial>
		<transitions>
			<transition>
				<name>checkuser</name>
				<target>checkuser</target>
			</transition>
		</transitions>
	</state>
	<condition>
		<name>checkuser</name>
		<description>Checking whether the user has specific role</description>
		<script> 
			<![CDATA[
				import com.liferay.portal.model.User; 
				import com.liferay.portal.kernel.workflow.WorkflowConstants; 
				import com.liferay.portal.service.UserLocalServiceUtil; 
				import com.liferay.portal.model.Role; 
				import java.util.List; 
          	
				String userId = (String) workflowContext.get(WorkflowConstants.CONTEXT_USER_ID); 
				User user = UserLocalServiceUtil.getUser(Long.valueOf(userId)); 
				returnValue = "published"; 
				
				List<Role> roles = user.getRoles(); 
				for (Role r : roles) { 
					// println user.getFullName() + " @@" + r.getName(); 
					if (r.getName().equalsIgnoreCase("blacklisted")) { 
						println "Setting approve for user : " + user.getFirstName(); 
						returnValue = "staged";
						println "blacklisted user content in review"; 
						break; 
					} 
				} 
				return returnValue; 
			]]> 
		</script>
		<script-language>groovy</script-language>
		<transitions>
			<transition>
				<name>published</name>
				<target>published</target>
			</transition>
			<transition>
				<name>staged</name>
				<target>staged</target>
				<default>false</default>
			</transition>
		</transitions>
	</condition>

	<!-- regular flow -->
	<state>
		<name>published</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
				<![CDATA[
				import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
				import com.liferay.portal.kernel.workflow.WorkflowConstants; 
				workflowContext.put("motivation","PUBLISHED");
				WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("pending"), workflowContext);
				]]>
				</script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<transitions>
			<transition>
				<name>evaluation</name>
				<target>evaluation</target>
			</transition>
		</transitions>
	</state>

	<!-- blacklisted flow -->
	<state>
		<name>staged</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
          <![CDATA[ 
          import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("draft"), workflowContext); 
          ]]>
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<transitions>
			<transition>
				<name>staged-evaluation</name>
				<target>staged-evaluation</target>
			</transition>
		</transitions>
	</state>

	<task>
		<name>evaluation</name>
		<actions>
			<notification>
				<name>Moderator notification</name>
				<description>Nuova idea da valutare</description>
				<template>
				<![CDATA[
				<html><body>

				Nuova idea da valutare
				<br/><br/>
				Il team di FuturaTrento
				
				</body></html>
				]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<!-- <notification-type>user-notification</notification-type> -->
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Review Completion Notification</name>
				<description>Aggiornamento stato per la tua idea su FuturaTrento</description>
				<template>
				  <![CDATA[
				  <html><body>
				  
				  Ciao ${userName},<br/><br/>
				  
				  la tua idea è stata <#switch transitionName><#case "duplicated">bloccata<#break><#case "approved">approvata<#break><#case "abusive">rifiutata<#break><#default>Default template</#switch> dal moderatore.
				  <br/><br/>
				  
				  Se qualcosa non ti è chiaro, contattalo
				  
				  <br/><br/>
				  Il team di FuturaTrento
				  
				  </body></html>
				  ]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<recipients>
					<user />
				</recipients>
				<execution-type>onExit</execution-type>
			</notification>
		</actions>
		<assignments>
			<scripted-assignment>
				<script>
          <![CDATA[
              import com.liferay.portal.kernel.util.GetterUtil;
              import com.liferay.portal.kernel.workflow.WorkflowConstants;
              
              import com.liferay.portal.model.Role;
              import com.liferay.portal.model.User;
              import com.liferay.portal.model.UserGroupRole;
              import com.liferay.portal.service.RoleLocalServiceUtil;
              import com.liferay.portal.service.UserGroupRoleLocalServiceUtil;
              
              long companyId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_COMPANY_ID));
              long groupId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_GROUP_ID));
				      users = new ArrayList<User>();
				      Role role = RoleLocalServiceUtil.getRole(companyId, "Moderator");
				      List<UserGroupRole> userGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRolesByGroupAndRole(groupId, role.getRoleId());
				
				      for (UserGroupRole ugr : userGroupRoles) {
				        users.add(ugr.getUser());
				      }
				      if (users.size() > 0) {
                roles = null;
                user = users.get(0);		
				      } else {
				        roles = new ArrayList<Role>();
				        roles.add(role);
				      }
            ]]>
          </script>
				<script-language>groovy</script-language>
			</scripted-assignment>
			<!-- <roles> -->
			<!-- <role> -->
			<!-- <role-type>site</role-type> -->
			<!-- <name>Moderator</name> -->
			<!-- </role> -->
			<!-- </roles> -->
		</assignments>
		<transitions>
			<transition>
				<name>duplicated</name>
				<target>duplicated</target>
				<default>false</default>
			</transition>
			<transition>
				<name>approved</name>
				<target>approved</target>
			</transition>
			<transition>
				<name>abusive</name>
				<target>abusive</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>

	<task>
		<name>staged-evaluation</name>
		<actions>
			<!-- <notification> <name>User notification</name> <template>Your idea 
				need approvation by moderator. You will inform about your idea review</template> 
				<template-language>freemarker</template-language> <notification-type>email</notification-type> 
				<notification-type>user-notification</notification-type> <recipients> <user></user> 
				</recipients> <execution-type>onEntry</execution-type> </notification> -->
			<notification>
				<name>Moderator notification</name>
				<description>Nuova idea da valutare</description>
				<template>
				<![CDATA[
				<html><body>

				Nuova idea da valutare
				<br/><br/>
				Il team di FuturaTrento
				
				</body></html>
				]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Review Completion Notification</name>
				<description>Aggiornamento stato per la tua idea su FuturaTrento</description>
				<template>
				  <![CDATA[
				  <html><body>
				  
				  Ciao ${userName},<br/><br/>
				  
				  la tua idea è stata <#switch transitionName><#case "duplicated">bloccata<#break><#case "approved">approvata<#break><#case "abusive">rifiutata<#break><#default>Default template</#switch> dal moderatore.
				  <br/><br/>
				  
				  Se qualcosa non ti è chiaro, contattalo
				  
				  <br/><br/>
				  Il team di FuturaTrento
				  
				  </body></html>
				  ]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<recipients>
					<user />
				</recipients>
				<execution-type>onExit</execution-type>
			</notification>
		</actions>
		<assignments>
			<scripted-assignment>
				<script>
          <![CDATA[
              import com.liferay.portal.kernel.util.GetterUtil;
              import com.liferay.portal.kernel.workflow.WorkflowConstants;
              
              import com.liferay.portal.model.Role;
              import com.liferay.portal.model.User;
              import com.liferay.portal.model.UserGroupRole;
              import com.liferay.portal.service.RoleLocalServiceUtil;
              import com.liferay.portal.service.UserGroupRoleLocalServiceUtil;
              
              long companyId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_COMPANY_ID));
              long groupId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_GROUP_ID));
              users = new ArrayList<User>();
              Role role = RoleLocalServiceUtil.getRole(companyId, "Moderator");
              List<UserGroupRole> userGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRolesByGroupAndRole(groupId, role.getRoleId());
        
              for (UserGroupRole ugr : userGroupRoles) {
                users.add(ugr.getUser());
              }
              if (users.size() > 0) {
                roles = null;
                user = users.get(0);    
              } else {
                roles = new ArrayList<Role>();
                roles.add(role);
              }
            ]]>
          </script>
				<script-language>groovy</script-language>
			</scripted-assignment>
			<!-- <roles> -->
			<!-- <role> -->
			<!-- <role-type>site</role-type> -->
			<!-- <name>Moderator</name> -->
			<!-- </role> -->
			<!-- </roles> -->
		</assignments>
		<transitions>
			<transition>
				<name>duplicated</name>
				<target>duplicated</target>
				<default>false</default>
			</transition>
			<transition>
				<name>approved</name>
				<target>approved</target>
			</transition>
			<transition>
				<name>abusive</name>
				<target>abusive</target>
				<default>false</default>
			</transition>
		</transitions>
	</task>

	<state>
		<name>duplicated</name>
		<actions>
			<action>
				<name>setStatus</name>
				<script>
          <![CDATA[ 
          import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
           workflowContext.put("ideaStatus","duplicated");
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("denied"), workflowContext);
          ]]>
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
	</state>
	<state>
		<name>approved</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
          <![CDATA[ 
          import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext); 
          ]]>
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
		<transitions>
			<transition>
				<name>manager-eval</name>
				<target>manager-eval</target>
			</transition>
		</transitions>
	</state>
	<state>
		<name>abusive</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
          <![CDATA[ 
         import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
          workflowContext.put("ideaStatus","abusive");
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("denied"), workflowContext); 
          ]]>
          
          
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
	</state>


	<!-- SECOND STEP WF -->

	<task>
		<name>manager-eval</name>
		<actions>
			<notification>
				<name>Manager notification</name>
				<description>Nuova idea da esaminare</description>
				<template>
				 <![CDATA[
				<html><body>
					Nuova idea da esaminare
				<br/><br/>
					Il team di FuturaTrento				
				</body></html>
          ]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<execution-type>onAssignment</execution-type>
			</notification>
			<notification>
				<name>Review Completion Notification</name>
				<description>La tua idea per FuturaTrento va avanti</description>
				<template>
				  <![CDATA[
				  <html><body>
				   <#switch transitionName>
				   <#case "accepted">
				   La tua idea è piaciuta ed è stata presa in esame dal Comune, presto saprai come andrà a finire.
				   <#break>
				   <#case "rejected">
				   La tua idea è stata rifiutata.
				   <#break>
				   <#default>
					Default template
				</#switch>
				<br/><br/>
				Il team di FuturaTrento
				</body></html>
          ]]>
				</template>
				<template-language>freemarker</template-language>
				<notification-type>email</notification-type>
				<recipients>
					<user />
				</recipients>
				<execution-type>onExit</execution-type>
			</notification>
		</actions>
		<assignments>
			<scripted-assignment>
				<script>
          <![CDATA[
              import com.liferay.portal.kernel.util.GetterUtil;
              import com.liferay.portal.kernel.workflow.WorkflowConstants;
              
              import com.liferay.portal.model.Role;
              import com.liferay.portal.model.User;
              import com.liferay.portal.model.UserGroupRole;
              import com.liferay.portal.service.RoleLocalServiceUtil;
              import com.liferay.portal.service.UserGroupRoleLocalServiceUtil;
              
              long companyId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_COMPANY_ID));
              long groupId = GetterUtil.getLong((String)workflowContext.get(WorkflowConstants.CONTEXT_GROUP_ID));
				      users = new ArrayList<User>();
				      Role role = RoleLocalServiceUtil.getRole(companyId, "Manager");
				      List<UserGroupRole> userGroupRoles = UserGroupRoleLocalServiceUtil.getUserGroupRolesByGroupAndRole(groupId, role.getRoleId());
				
				      for (UserGroupRole ugr : userGroupRoles) {
				        users.add(ugr.getUser());
				      }
				      if (users.size() > 0) {
                roles = null;
                user = users.get(0);		
				      } else {
				        roles = new ArrayList<Role>();
				        roles.add(role);
				      }
            ]]>
          </script>
				<script-language>groovy</script-language>
			</scripted-assignment>
		</assignments>
		<transitions>
			<transition>
				<name>accepted</name>
				<target>accepted</target>
			</transition>
			<transition>
				<name>rejected</name>
				<target>rejected</target>
			</transition>
		</transitions>
	</task>


	<state>
		<name>accepted</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
          <![CDATA[ 
          import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
           workflowContext.put("ideaStatus","complete");
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext); 
          ]]>
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
	</state>


	<state>
		<name>rejected</name>
		<actions>
			<action>
				<name>updateStatus</name>
				<script>
          <![CDATA[ 
          import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil; 
          import com.liferay.portal.kernel.workflow.WorkflowConstants; 
          workflowContext.put("ideaStatus","rejected");
          WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext); 
          ]]>
        </script>
				<script-language>groovy</script-language>
				<execution-type>onEntry</execution-type>
			</action>
		</actions>
	</state>

</workflow-definition>